# Enterprise Security Platform - Splunk Transforms and Lookups
# Data enrichment and threat intelligence integration

[threat_intel_ips]
filename = threat_intel_ips.csv
case_sensitive_match = false

[threat_intel_domains]
filename = threat_intel_domains.csv
case_sensitive_match = false

[threat_intel_hashes]
filename = threat_intel_hashes.csv
case_sensitive_match = false

[mitre_attack_techniques]
filename = mitre_attack_techniques.csv
case_sensitive_match = false

[asset_inventory]
filename = asset_inventory.csv
case_sensitive_match = false

[user_directory]
filename = user_directory.csv
case_sensitive_match = false

[geoip_enrichment]
external_cmd = geoip_lookup.py ip
fields_list = ip, country, city, latitude, longitude, isp

[risk_scoring]
external_cmd = risk_scoring.py event_type, severity, src_ip, dest_ip
fields_list = event_type, severity, src_ip, dest_ip, risk_score, risk_level

[compliance_mapping]
filename = compliance_mapping.csv
case_sensitive_match = false

# Field extractions for custom log formats
[extract_suricata_fields]
REGEX = "timestamp":"([^"]+)".*"alert":{"action":"([^"]+)".*"signature":"([^"]+)".*"category":"([^"]+)".*"severity":(\d+).*"src_ip":"([^"]+)".*"dest_ip":"([^"]+)".*"src_port":(\d+).*"dest_port":(\d+)
FORMAT = timestamp::$1 action::$2 signature::$3 category::$4 severity::$5 src_ip::$6 dest_ip::$7 src_port::$8 dest_port::$9

[extract_envoy_fields]
REGEX = \[([^\]]+)\]\s+"(\w+)\s+([^\s]+)[^"]*"\s+(\d+)\s+\S+\s+(\d+)\s+(\d+)\s+(\d+)\s+\S+\s+"([^"]*)"\s+"([^"]*)"\s+"([^"]*)"\s+"([^"]*)"\s+"([^"]*)"
FORMAT = timestamp::$1 method::$2 path::$3 response_code::$4 bytes_received::$5 bytes_sent::$6 duration::$7 x_forwarded_for::$8 user_agent::$9 request_id::$10 authority::$11 upstream_host::$12

[extract_pfsense_fields]
REGEX = (\w+\s+\d+\s+\d+:\d+:\d+)\s+\S+\s+filterlog:\s+(\d+),\S*,\S*,\S*,(\w+),(\w+),(\w+),(\w+),\d+,.*?(\d+\.\d+\.\d+\.\d+),(\d+\.\d+\.\d+\.\d+),(\w+),(\d+),(\d+)
FORMAT = timestamp::$1 rule_number::$2 interface::$3 reason::$4 action::$5 direction::$6 src_ip::$7 dest_ip::$8 protocol::$9 src_port::$10 dest_port::$11

# Data models for CIM compliance
[Network_Traffic]
EVAL-bytes = if(isnull(bytes_in) OR isnull(bytes_out), bytes, bytes_in + bytes_out)
EVAL-duration = if(isnull(duration), null(), duration)
EVAL-src = if(isnull(src_ip), src, src_ip)
EVAL-dest = if(isnull(dest_ip), dest, dest_ip)
EVAL-transport = if(isnull(protocol), transport, protocol)

[Authentication]
EVAL-user = if(isnull(user), username, user)
EVAL-src = if(isnull(src_ip), src, src_ip)
EVAL-dest = if(isnull(dest_ip), dest, dest_ip)
EVAL-action = case(
    match(_raw, "success|successful|login"), "success",
    match(_raw, "fail|failed|invalid|denied"), "failure",
    1==1, "unknown"
)

[Malware]
EVAL-signature = if(isnull(signature), rule_name, signature)
EVAL-vendor_product = "Suricata"
EVAL-category = if(isnull(category), "malware", category)

[Intrusion_Detection]
EVAL-signature = if(isnull(signature), rule_name, signature)
EVAL-vendor_product = "Suricata"
EVAL-category = if(isnull(category), "intrusion", category)
EVAL-severity = case(
    severity=1, "informational",
    severity=2, "low", 
    severity=3, "medium",
    severity=4, "high",
    severity>=5, "critical",
    1==1, "unknown"
)

# Risk scoring calculations
[calculate_risk_score]
REGEX = .*
FORMAT = 
EVAL-base_risk = case(
    severity="critical", 90,
    severity="high", 70,
    severity="medium", 50,
    severity="low", 30,
    1==1, 20
)
EVAL-geo_risk = if(match(src_country, "CN|RU|KP|IR"), 20, 0)
EVAL-time_risk = if((date_hour < 6 OR date_hour > 22) AND (date_wday != 0 AND date_wday != 6), 15, 0)
EVAL-frequency_risk = if(event_count > 10, 25, if(event_count > 5, 15, 0))
EVAL-final_risk_score = base_risk + geo_risk + time_risk + frequency_risk
EVAL-risk_level = case(
    final_risk_score >= 90, "critical",
    final_risk_score >= 70, "high", 
    final_risk_score >= 50, "medium",
    final_risk_score >= 30, "low",
    1==1, "informational"
)

# Compliance field mappings
[pci_dss_mapping]
EVAL-pci_requirement = case(
    match(signature, "credit.*card|payment"), "3.4",
    match(signature, "authentication|login"), "8.1",
    match(signature, "encryption|ssl|tls"), "4.1",
    match(signature, "access.*control"), "7.1",
    match(signature, "network.*security"), "1.1",
    1==1, "unknown"
)

[sox_mapping]
EVAL-sox_control = case(
    match(signature, "financial.*data"), "ITGC-01",
    match(signature, "access.*control"), "ITGC-02", 
    match(signature, "change.*management"), "ITGC-03",
    match(signature, "data.*integrity"), "ITGC-04",
    1==1, "unknown"
)

[gdpr_mapping]
EVAL-gdpr_article = case(
    match(signature, "personal.*data|pii"), "Article 32",
    match(signature, "data.*breach"), "Article 33",
    match(signature, "consent"), "Article 7",
    match(signature, "data.*transfer"), "Article 44",
    1==1, "unknown"
)

# Threat intelligence enrichment
[enrich_with_threat_intel]
REGEX = .*
FORMAT = 
EVAL-is_malicious_ip = if(isnull(threat_level), "false", "true")
EVAL-threat_confidence = case(
    threat_level="high", 90,
    threat_level="medium", 70,
    threat_level="low", 50,
    1==1, 0
)
EVAL-threat_category = if(isnull(threat_type), "unknown", threat_type)

# Asset criticality scoring
[asset_criticality]
EVAL-asset_criticality = case(
    match(dest_ip, "10\.0\.1\.*"), "critical",    # Database servers
    match(dest_ip, "10\.0\.2\.*"), "high",        # Application servers  
    match(dest_ip, "10\.0\.3\.*"), "medium",      # Web servers
    match(dest_ip, "10\.0\.4\.*"), "low",         # Development servers
    1==1, "unknown"
)

# User behavior analytics
[user_behavior_baseline]
external_cmd = user_behavior_analysis.py user, action, timestamp
fields_list = user, action, timestamp, baseline_score, anomaly_score, behavior_risk

# Network segmentation validation
[network_segmentation_check]
EVAL-segment_violation = case(
    (match(src_ip, "10\.0\.1\.*") AND NOT match(dest_ip, "10\.0\.1\.*|10\.0\.2\.*")), "database_isolation_violation",
    (match(src_ip, "10\.0\.100\.*") AND match(dest_ip, "10\.0\.1\.*")), "dmz_to_internal_violation", 
    (match(src_ip, "192\.168\.*") AND match(dest_ip, "10\.0\.1\.*")), "guest_to_production_violation",
    1==1, "none"
)

# Incident correlation
[incident_correlation]
external_cmd = incident_correlation.py src_ip, dest_ip, signature, timestamp
fields_list = src_ip, dest_ip, signature, timestamp, incident_id, correlation_score, related_events
