version: '3.8'

services:
  # Elasticsearch for log storage and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - node.name=es-node-1
      - cluster.name=enterprise-security-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - security-network
    restart: unless-stopped

  # Kibana for visualization and dashboards
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - KIBANA_PASSWORD=changeme
    volumes:
      - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    networks:
      - security-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
      - ELASTIC_PASSWORD=changeme
    volumes:
      - ./elk/logstash/security-pipeline.conf:/usr/share/logstash/pipeline/security-pipeline.conf
      - ./elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"  # Beats input
      - "5045:5045"  # Istio logs
      - "5046:5046"  # Application logs
      - "5047:5047"  # Windows logs
      - "5514:5514"  # Syslog
      - "5515:5515"  # Additional syslog
      - "8080:8080"  # HTTP webhook
    networks:
      - security-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass changeme
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - security-network
    restart: unless-stopped

  # Suricata IDS/IPS
  suricata:
    image: jasonish/suricata:latest
    container_name: suricata
    network_mode: host
    cap_add:
      - NET_ADMIN
      - SYS_NICE
    volumes:
      - ./suricata/suricata.yaml:/etc/suricata/suricata.yaml
      - ./suricata/rules:/var/lib/suricata/rules
      - suricata_logs:/var/log/suricata
    command: >
      suricata -c /etc/suricata/suricata.yaml -i eth0 -v
    restart: unless-stopped

  # Kafka for real-time event streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    networks:
      - security-network
    depends_on:
      - zookeeper
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - security-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - security-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=changeme
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - security-network
    restart: unless-stopped

  # AI Threat Detection Service
  ai-threat-detection:
    build:
      context: .
      dockerfile: Dockerfile.ai-detection
    container_name: ai-threat-detection
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./automation/monitoring:/app
      - ai_models:/app/models
    networks:
      - security-network
    depends_on:
      - elasticsearch
      - redis
      - kafka
    restart: unless-stopped

  # Incident Response Service
  incident-response:
    build:
      context: .
      dockerfile: Dockerfile.incident-response
    container_name: incident-response
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - REDIS_HOST=redis
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - PFSENSE_URL=${PFSENSE_URL}
      - PFSENSE_USERNAME=${PFSENSE_USERNAME}
      - PFSENSE_PASSWORD=${PFSENSE_PASSWORD}
    volumes:
      - ./automation/response:/app
    networks:
      - security-network
    depends_on:
      - elasticsearch
      - redis
    restart: unless-stopped

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - suricata_logs:/var/log/suricata:ro
    networks:
      - security-network
    depends_on:
      - logstash
    restart: unless-stopped

  # Metricbeat for system metrics
  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.11.0
    container_name: metricbeat
    user: root
    volumes:
      - ./monitoring/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    networks:
      - security-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - security-network
    depends_on:
      - kibana
      - grafana
    restart: unless-stopped

  # Security Dashboard (Custom React App)
  security-dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: security-dashboard
    environment:
      - REACT_APP_ELASTICSEARCH_URL=http://elasticsearch:9200
      - REACT_APP_API_BASE_URL=http://api:8000
    ports:
      - "3001:3000"
    networks:
      - security-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://postgres:changeme@postgres:5432/security_platform
    ports:
      - "8000:8000"
    networks:
      - security-network
    depends_on:
      - elasticsearch
      - redis
      - postgres
    restart: unless-stopped

  # PostgreSQL for application data
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=security_platform
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changeme
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - security-network
    restart: unless-stopped

volumes:
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  suricata_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ai_models:
    driver: local
  postgres_data:
    driver: local

networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
